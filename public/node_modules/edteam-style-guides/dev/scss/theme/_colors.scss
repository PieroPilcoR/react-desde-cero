/*
  Map structure
  $map-name : (
    // -- Css classes will build with this names -- //
    names : ('name', 'nameTwo'),
    // -- Color variations -- //
    colors : (
      'variation' : hsl(value),
      'variation' : hsl(value)
    )
  );
*/

$primary : (
  names   : ('blue', 'primary'),
  colors : (
    '100' : hsl(205, 85, 95),
    '200' : hsl(205, 87, 85),
    '300' : hsl(205, 87, 75),
    '400' : hsl(205, 87, 65),
    '500' : hsl(205, 87, 50),
    '600' : hsl(205, 86, 45),
    '700' : hsl(205, 86, 35),
    '800' : hsl(205, 86, 25),
    '900' : hsl(205, 87, 15)
  )
);

$green : (
  names   : ('green'),
  colors : (
    '100' : hsl(148, 68, 95),
    '200' : hsl(150, 66, 85),
    '300' : hsl(150, 65, 75),
    '400' : hsl(150, 65, 65),
    '500' : hsl(150, 65, 50),
    '600' : hsl(150, 65, 45),
    '700' : hsl(150, 65, 35),
    '800' : hsl(150, 66, 25),
    '900' : hsl(150, 66, 15)
  )
);

$accent: (
  names   : ('accent', 'yellow'),
  colors : (
    '100' : hsl(38, 100, 96),
    '200' : hsl(38, 100, 89),
    '300' : hsl(38, 100, 81),
    '400' : hsl(38, 100, 74),
    '500' : hsl(38, 100, 63),
    '600' : hsl(38, 77, 56),
    '700' : hsl(38, 60, 44),
    '800' : hsl(38, 60, 31),
    '900' : hsl(38, 60, 19)
  )
);

$red: (
  names   : ('red'),
  colors : (
    '100' : hsl(0, 79, 96),
    '200' : hsl(0, 79, 89),
    '300' : hsl(0, 79, 82),
    '400' : hsl(0, 79, 74),
    '500' : hsl(0, 79, 63),
    '600' : hsl(0, 61, 57),
    '700' : hsl(0, 46, 44),
    '800' : hsl(0, 46, 32),
    '900' : hsl(0, 46, 19)
  )
);

$grey: (
  names   : ('grey'),
  colors : (
    '100' : hsl(240, 60, 99),
    '200' : hsl(0, 0, 99),
    '300' : hsl(200, 23, 95),
    '400' : hsl(203, 8, 80),
    '500' : hsl(205, 7, 65),
    '600' : hsl(193, 6, 44),
    '700' : hsl(205, 26, 22),
    '800' : hsl(205, 26, 18),
    '900' : hsl(205, 27, 14)
  )
);

// Prototipado de colores para dejar de usar la variable --color en bordes, fondos y texto
@mixin color-prototype($variable, $selector : $variable) {
  $value: var(--#{$variable});
  // Fondos y fondos con hover
  @include prototype(('bg-#{$selector}', 'hover-bg-#{$selector}:hover'), background, $value);
  // textos y textos con hover
  @include prototype(('color-#{$selector}', 'hover-color-#{$selector}:hover'), color, $value);
  // Bordes en todos los lados
  @include prototype(('border-#{$selector}', 'hover-border-#{$selector}:hover'), border, 1px solid var(--#{$selector}));
  // Bordes en cada lado independiente
  @each $direction in $directions {
    @include prototype(('border-#{$direction}-#{$selector}', 'hover-border-#{$direction}-#{$selector}:hover'), border-#{$direction}, 1px solid $value);
  }
}

@include color-prototype('white-color', 'white');
@include color-prototype('title-color', 'title');
@include color-prototype('text-color', 'text');
@include color-prototype('text-color-light', 'text-light');
@include color-prototype('text-color-lighter', 'text-lighter');
@include color-prototype('transparent');

@mixin color-palette($map-color) {

  $colors        : map-get($map-color, colors);
  $colors-length : length($colors);

  // Get each colors names in the map
  @each $name in map-get($map-color, names) {

    // Here we start to build the class name
    .#{$name} {

      // Create a for loop for get the code colors and their values
      @for $index from 1 through $colors-length {

        // Get the code color in the map
        &-#{nth(nth($colors, $index), 1)} {
          $color : nth(nth($colors, $index), 2);
          // Save selector for use it in :root.
          // We need convert it in to string and delete de dot (.)
          $selector : str-slice(& + '', 2);

          // Set color value
          --color : #{$color};
          // Validate the index for set the alt color. If it's the last color, it will no have a alt color
          --color-alt : #{if($index < $colors-length, nth(nth($colors, $index + 1), 2), #{$color})};

          @at-root {

            :root {
              // Set color value en :root
              --#{$selector} : #{$color};
            }

            @include color-prototype($selector);

          }

        }

      }

    }

  }

  /*
    example result :
    .blue-500 {
      --color     : #1192ee;
      --color-alt : #1083d5;
    }
  */

}

@include color-palette($primary);
@include color-palette($green);
@include color-palette($accent);
@include color-palette($red);
@include color-palette($grey);


// shorthands
:root {
  --light-color        : var(--grey-300);
  --border-color       : var(--grey-300);
  --title-color        : var(--grey-700);
  --text-color         : var(--grey-600);
  --text-color-light   : var(--grey-500);
  --text-color-lighter : var(--grey-400);
  --color-light        : var(--light-color);
  --color-border       : var(--border-color);
  --color-title        : var(--title-color);
  --color-text         : var(--text-color);
  --color-text-light   : var(--color-text-light);
  --color-text-lighter : var(--text-color-lighter);
  --body-bg            : var(--grey-100);
  --color              : var(--blue-500);
  --color-alt          : var(--blue-600);
  --white-color        : #fff;
  --transparent        : transparent;
}

.white-color,
.color-white {
  --color : var(--white-color);
}

.text-color,
.color-text {
  --color     : var(--text-color);
  --color-alt : var(--dark-color);
}

.text-color-light,
.color-text-light {
  --color     : var(--text-color-light);
  --color-alt : var(--text-color);
}

.text-color-lighter,
.color-text-lighter {
  --color     : var(--text-color-lighter);
  --color-alt : var(--text-color-light);
}

.light-color,
.color-light {
  --color     : var(--light-color);
  --color-alt : var(--border-color);
}

.border-color {
  --color : var(--border-color);
}

.body-bg {
  --color : var(--body-bg);
}

.color {
  color : var(--color)
}

.background {
  background-color : var(--color);
}

.fill {
  fill : var(--color);
}

.border {
  --border-color : var(--color);
}

.hover-bg:hover {
  background-color: var(--color-alt);
}

.hover-text:hover {
  color : var(--color-alt);
}
